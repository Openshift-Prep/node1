pipeline {
    options {
        // set a timeout of 30 minutes for this pipeline
        timeout(time: 30, unit: 'MINUTES')
    }
    agent any
      tools {nodejs "nodejs1"}

      environment {
              //TODO: Edit these vars as per your env
              DEV_PROJECT = "project-dev"
              STAGE_PROJECT = "project-stage"
              APP_GIT_URL = "https://github.com/Openshift-Prep/node1"
              NEXUS_SERVER = "https://nexus-project-devops.dte-ocp46-y7zvih-915b3b336cabec458a7c7ec2aa7c625f-0000.us-east.containers.appdomain.cloud/repository/group"

              // DO NOT CHANGE THE GLOBAL VARS BELOW THIS LINE
              APP_NAME = "node1app"
          }





    stages {

    stage('NPM Install') {
                steps {
                    echo '### Installing NPM dependencies ###'
                    sh '''
                            npm config set registry ${NEXUS_SERVER}
                            npm install
                       '''
                }
            }

            stage('Run Unit Tests') {
                steps {
                    echo '### Running unit tests ###'
                    sh 'npm test'
                }
            }

            stage('Run Linting Tools') {
                steps {
                    echo '### Running eslint on code ###'
                    sh 'npm run lint'
                }
            }

            stage('Launch new app in DEV env') {
            steps {
                echo '### Cleaning existing resources in DEV env ###'
                sh '''
                        oc -n${DEV_PROJECT} delete all -l app=${APP_NAME}
                        sleep 5
                   '''

                echo '### Creating a new app in DEV env ###'
                sh '''
				       oc new-app --as-deployment-config \
					   --name ${APP_NAME} nodejs:12~${APP_GIT_URL}#dev \
             --build-env npm_config_registry=${NEXUS_SERVER} \
					   -n${DEV_PROJECT}

					   oc -n${DEV_PROJECT} expose svc/${APP_NAME}
				'''
            }
        }

        stage('Wait for S2I build to complete') {
            steps {
                script {
                    openshift.withCluster() {
                        openshift.withProject( "${DEV_PROJECT}" ) {
                            def bc = openshift.selector("bc", "${APP_NAME}")
                            bc.logs('-f')
                            def builds = bc.related('builds')
                            builds.untilEach(1) {
                                return (it.object().status.phase == "Complete")
                            }
                        }
                    }
                }
            }
        }

        stage('Wait for deployment in DEV env') {
            steps {
                script {
                    openshift.withCluster() {
                        openshift.withProject( "${DEV_PROJECT}" ) {
                            def deployment = openshift.selector("dc", "${APP_NAME}").rollout()
                            openshift.selector("dc", "${APP_NAME}").related('pods').untilEach(1) {
                                return (it.object().status.phase == "Running")
                            }
                        }
                    }
                }
            }
        }

        stage('Promote to Staging Env') {
            steps {
                timeout(time: 60, unit: 'MINUTES') {
                    input message: "Promote to Staging?"
                }
                script{
					openshift.withCluster(){
						openshift.tag("${DEV_PROJECT}/${APP_NAME}:latest", "${STAGE_PROJECT}/${APP_NAME}:staging")
					}
				}
            }
        }

        stage('Deploy to Staging Env') {
            steps {
                echo '### Cleaning existing resources in Staging ###'
                sh '''
                        oc -n${STAGE_PROJECT} delete all -l app=${APP_NAME}
                        sleep 5
                   '''

                echo '### Creating a new app in Staging ###'
                sh '''
					oc new-app --as-deployment-config \
					--name ${APP_NAME} nodejs:12~${APP_GIT_URL}#staging \
					-i ${APP_NAME}:staging \
					-n ${STAGE_PROJECT}

					oc -n${STAGE_PROJECT} expose svc/${APP_NAME}
				'''
            }
        }

        stage('Wait for deployment in Staging') {
            steps {
                sh "oc get route ${APP_NAME} -n ${STAGE_PROJECT} -o jsonpath='{ .spec.host }' --loglevel=4 > routehost"

                script {
                    routeHost = readFile('routehost').trim()

                    openshift.withCluster() {
                        openshift.withProject( "${STAGE_PROJECT}" ) {
                            def deployment = openshift.selector("dc", "${APP_NAME}").rollout()
                            openshift.selector("dc", "${APP_NAME}").related('pods').untilEach(1) {
                                return (it.object().status.phase == "Running")
                            }
                        }

                        echo "Deployment to Staging env is complete. Access the app at the URL http://${routeHost}."
                    }
                }
            }
        }
    }

    }
